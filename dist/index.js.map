{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  MongoClient,\n  MongoClientOptions,\n  MongoServerError,\n  ServerApiVersion,\n  FindCursor,\n  Filter,\n  ObjectId,\n  WriteConcern,\n  UpdateResult,\n  DeleteResult,\n  OptionalId,\n  OptionalUnlessRequiredId,\n  Document,\n} from 'mongodb';\n\n/**\n * MongoDB Einfach\n *\n * Expose a mongoDb collection as a class.\n *\n * @version 1.0.0\n */\n\ninterface EinfachMongoDbDocument extends OptionalId<Document> {\n  _id?: ObjectId;\n  revision?: number;\n  revisionDate?: Date;\n}\n\nclass EinfachMongoDbCollection<T extends EinfachMongoDbDocument> {\n  // store mongoclients according to their URL key for connection pooling.\n  private static _clients: Map<string, MongoClient> = new Map();\n\n  // init the client and store it in the clients map.\n  private static async getClient(\n    url: string,\n    options: MongoClientOptions\n  ): Promise<MongoClient> {\n    if (!this._clients.has(url)) {\n      this._clients.set(url, new MongoClient(url, options));\n    }\n\n    try {\n      const client = this._clients.get(url);\n      if (client instanceof MongoClient) {\n        return await client.connect();\n      }\n      throw new Error('Client is not an instance of MongoClient.');\n    } catch (error: any) {\n      if (error.codeName === 'AuthenticationFailed') {\n        throw new Error('Authentication Error: Invalid credentials.');\n      }\n      throw error;\n    }\n  }\n\n  // expose the map of clients, this allows for more customized usage such as aggregations.\n  static clients(): Map<string, MongoClient> {\n    return this._clients;\n  }\n\n  private _url: string = '';\n  private _options: MongoClientOptions = {};\n  private _dbName: string = '';\n  private _collectionName: string = '';\n\n  constructor(\n    serverUrl: string,\n    dbName: string,\n    collectionName: string,\n    clientOptions: MongoClientOptions = {\n      monitorCommands: true,\n      authSource: 'admin',\n      connectTimeoutMS: 5000,\n      serverSelectionTimeoutMS: 5000,\n      retryWrites: true,\n      writeConcern: new WriteConcern('majority'),\n      serverApi: {\n        version: ServerApiVersion.v1,\n        strict: true,\n        deprecationErrors: true,\n      },\n    }\n  ) {\n    this._url = serverUrl;\n    this._options = clientOptions;\n    this._dbName = dbName;\n    this._collectionName = collectionName;\n  }\n\n  // count the number of documents in the collection.\n  async count(): Promise<number> {\n    try {\n      const client = await EinfachMongoDbCollection.getClient(\n        this._url,\n        this._options\n      );\n\n      const collection = client\n        .db(this._dbName)\n        .collection<T>(this._collectionName);\n      const count: number = await collection.countDocuments({});\n      return count;\n    } catch (error) {\n      if (error instanceof MongoServerError) {\n        return -1; // collection does not exist\n      }\n      throw error;\n    }\n  }\n\n  // get all documents in the collection.\n  async get(): Promise<T[]> {\n    const client = await EinfachMongoDbCollection.getClient(\n      this._url,\n      this._options\n    );\n    const collection = client\n      .db(this._dbName)\n      .collection<T>(this._collectionName);\n    const cursor = collection.find({}) as unknown as FindCursor<T>;\n    const documents: T[] = await cursor.toArray();\n    return documents;\n  }\n\n  // get a document by its id.\n  async getById(id: string): Promise<T | null> {\n    const client = await EinfachMongoDbCollection.getClient(\n      this._url,\n      this._options\n    );\n    const collection = client\n      .db(this._dbName)\n      .collection<T>(this._collectionName);\n    let _id: ObjectId | null = null;\n    try {\n      _id = new ObjectId(id);\n    } catch (error) {\n      return null;\n    }\n    const query = { _id } as Filter<T>;\n    const document = ((await collection.findOne(query)) as T) || null;\n    return document;\n  }\n\n  // insert a new document into the collection.\n  async insert(data: T): Promise<T> {\n    const client = await EinfachMongoDbCollection.getClient(\n      this._url,\n      this._options\n    );\n    const collection = client\n      .db(this._dbName)\n      .collection<T>(this._collectionName);\n    const result = await collection.insertOne(\n      data as OptionalUnlessRequiredId<T>\n    );\n    const insertedId: ObjectId | null =\n      result.insertedId as ObjectId | null;\n    const insertedDocument = { ...data, _id: insertedId } as T;\n    return insertedDocument;\n  }\n\n  // update a document in the collection\n  async update(data: T): Promise<T> {\n    const client = await EinfachMongoDbCollection.getClient(\n      this._url,\n      this._options\n    );\n    const collection = client\n      .db(this._dbName)\n      .collection<T>(this._collectionName);\n    const { _id, ...document } = data;\n    let formattedId = null;\n    try {\n      formattedId = _id instanceof ObjectId ? _id : new ObjectId(_id);\n    } catch (error) {\n      throw new Error('Invalid _id.');\n    }\n    const query = { _id: formattedId } as Filter<T>;\n    const update = { $set: document } as Document;\n    const result: UpdateResult = (await collection.updateOne(\n      query,\n      update\n    )) as UpdateResult;\n    const { matchedCount, modifiedCount } = result;\n    if (matchedCount === 0) {\n      throw new Error('Document was not found.');\n    }\n    if (modifiedCount === 0) {\n      throw new Error('Document was not updated.');\n    }\n    return data;\n  }\n\n  // remove a document from the collection.\n  async remove(id: string): Promise<boolean> {\n    const client = await EinfachMongoDbCollection.getClient(\n      this._url,\n      this._options\n    );\n    const collection = client\n      .db(this._dbName)\n      .collection<T>(this._collectionName);\n    let _id: ObjectId | null = null;\n    try {\n      _id = new ObjectId(id);\n    } catch (error) {\n      return false;\n    }\n\n    const query = { _id } as Filter<T>;\n    const result: DeleteResult = (await collection.deleteOne(\n      query\n    )) as DeleteResult;\n    const { deletedCount } = result;\n    return deletedCount >= 1;\n  }\n\n  // drop the collection.\n  async drop(): Promise<boolean> {\n    const client = await EinfachMongoDbCollection.getClient(\n      this._url,\n      this._options\n    );\n    const collection = client\n      .db(this._dbName)\n      .collection<T>(this._collectionName);\n    const result = await collection.drop();\n    return result;\n  }\n}\n\nexport { EinfachMongoDbCollection, EinfachMongoDbDocument };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA,EACE;AAAA,EAEA;AAAA,EACA;AAAA,EAGA;AAAA,EACA;AAAA,OAMK;AAgBP,IAAM,4BAAN,MAAM,0BAA2D;AAAA,EAqC/D,YACE,WACA,QACA,gBACA,gBAAoC;AAAA,IAClC,iBAAiB;AAAA,IACjB,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,0BAA0B;AAAA,IAC1B,aAAa;AAAA,IACb,cAAc,IAAI,aAAa,UAAU;AAAA,IACzC,WAAW;AAAA,MACT,SAAS,iBAAiB;AAAA,MAC1B,QAAQ;AAAA,MACR,mBAAmB;AAAA,IACrB;AAAA,EACF,GACA;AAtBF,SAAQ,OAAe;AACvB,SAAQ,WAA+B,CAAC;AACxC,SAAQ,UAAkB;AAC1B,SAAQ,kBAA0B;AAoBhC,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA,EAtDA,OAAqB,UACnB,KACA,SACsB;AAAA;AACtB,UAAI,CAAC,KAAK,SAAS,IAAI,GAAG,GAAG;AAC3B,aAAK,SAAS,IAAI,KAAK,IAAI,YAAY,KAAK,OAAO,CAAC;AAAA,MACtD;AAEA,UAAI;AACF,cAAM,SAAS,KAAK,SAAS,IAAI,GAAG;AACpC,YAAI,kBAAkB,aAAa;AACjC,iBAAO,MAAM,OAAO,QAAQ;AAAA,QAC9B;AACA,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC7D,SAAS,OAAY;AACnB,YAAI,MAAM,aAAa,wBAAwB;AAC7C,gBAAM,IAAI,MAAM,4CAA4C;AAAA,QAC9D;AACA,cAAM;AAAA,MACR;AAAA,IACF;AAAA;AAAA;AAAA,EAGA,OAAO,UAAoC;AACzC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAgCM,QAAyB;AAAA;AAC7B,UAAI;AACF,cAAM,SAAS,MAAM,0BAAyB;AAAA,UAC5C,KAAK;AAAA,UACL,KAAK;AAAA,QACP;AAEA,cAAM,aAAa,OAChB,GAAG,KAAK,OAAO,EACf,WAAc,KAAK,eAAe;AACrC,cAAM,QAAgB,MAAM,WAAW,eAAe,CAAC,CAAC;AACxD,eAAO;AAAA,MACT,SAAS,OAAO;AACd,YAAI,iBAAiB,kBAAkB;AACrC,iBAAO;AAAA,QACT;AACA,cAAM;AAAA,MACR;AAAA,IACF;AAAA;AAAA;AAAA,EAGM,MAAoB;AAAA;AACxB,YAAM,SAAS,MAAM,0BAAyB;AAAA,QAC5C,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AACA,YAAM,aAAa,OAChB,GAAG,KAAK,OAAO,EACf,WAAc,KAAK,eAAe;AACrC,YAAM,SAAS,WAAW,KAAK,CAAC,CAAC;AACjC,YAAM,YAAiB,MAAM,OAAO,QAAQ;AAC5C,aAAO;AAAA,IACT;AAAA;AAAA;AAAA,EAGM,QAAQ,IAA+B;AAAA;AAC3C,YAAM,SAAS,MAAM,0BAAyB;AAAA,QAC5C,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AACA,YAAM,aAAa,OAChB,GAAG,KAAK,OAAO,EACf,WAAc,KAAK,eAAe;AACrC,UAAI,MAAuB;AAC3B,UAAI;AACF,cAAM,IAAI,SAAS,EAAE;AAAA,MACvB,SAAS,OAAO;AACd,eAAO;AAAA,MACT;AACA,YAAM,QAAQ,EAAE,IAAI;AACpB,YAAM,YAAa,MAAM,WAAW,QAAQ,KAAK,MAAY;AAC7D,aAAO;AAAA,IACT;AAAA;AAAA;AAAA,EAGM,OAAO,MAAqB;AAAA;AAChC,YAAM,SAAS,MAAM,0BAAyB;AAAA,QAC5C,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AACA,YAAM,aAAa,OAChB,GAAG,KAAK,OAAO,EACf,WAAc,KAAK,eAAe;AACrC,YAAM,SAAS,MAAM,WAAW;AAAA,QAC9B;AAAA,MACF;AACA,YAAM,aACJ,OAAO;AACT,YAAM,mBAAmB,iCAAK,OAAL,EAAW,KAAK,WAAW;AACpD,aAAO;AAAA,IACT;AAAA;AAAA;AAAA,EAGM,OAAO,MAAqB;AAAA;AAChC,YAAM,SAAS,MAAM,0BAAyB;AAAA,QAC5C,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AACA,YAAM,aAAa,OAChB,GAAG,KAAK,OAAO,EACf,WAAc,KAAK,eAAe;AACrC,YAA6B,WAArB,MA7KZ,IA6KiC,IAAb,qBAAa,IAAb,CAAR;AACR,UAAI,cAAc;AAClB,UAAI;AACF,sBAAc,eAAe,WAAW,MAAM,IAAI,SAAS,GAAG;AAAA,MAChE,SAAS,OAAO;AACd,cAAM,IAAI,MAAM,cAAc;AAAA,MAChC;AACA,YAAM,QAAQ,EAAE,KAAK,YAAY;AACjC,YAAM,SAAS,EAAE,MAAM,SAAS;AAChC,YAAM,SAAwB,MAAM,WAAW;AAAA,QAC7C;AAAA,QACA;AAAA,MACF;AACA,YAAM,EAAE,cAAc,cAAc,IAAI;AACxC,UAAI,iBAAiB,GAAG;AACtB,cAAM,IAAI,MAAM,yBAAyB;AAAA,MAC3C;AACA,UAAI,kBAAkB,GAAG;AACvB,cAAM,IAAI,MAAM,2BAA2B;AAAA,MAC7C;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA,EAGM,OAAO,IAA8B;AAAA;AACzC,YAAM,SAAS,MAAM,0BAAyB;AAAA,QAC5C,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AACA,YAAM,aAAa,OAChB,GAAG,KAAK,OAAO,EACf,WAAc,KAAK,eAAe;AACrC,UAAI,MAAuB;AAC3B,UAAI;AACF,cAAM,IAAI,SAAS,EAAE;AAAA,MACvB,SAAS,OAAO;AACd,eAAO;AAAA,MACT;AAEA,YAAM,QAAQ,EAAE,IAAI;AACpB,YAAM,SAAwB,MAAM,WAAW;AAAA,QAC7C;AAAA,MACF;AACA,YAAM,EAAE,aAAa,IAAI;AACzB,aAAO,gBAAgB;AAAA,IACzB;AAAA;AAAA;AAAA,EAGM,OAAyB;AAAA;AAC7B,YAAM,SAAS,MAAM,0BAAyB;AAAA,QAC5C,KAAK;AAAA,QACL,KAAK;AAAA,MACP;AACA,YAAM,aAAa,OAChB,GAAG,KAAK,OAAO,EACf,WAAc,KAAK,eAAe;AACrC,YAAM,SAAS,MAAM,WAAW,KAAK;AACrC,aAAO;AAAA,IACT;AAAA;AACF;AAAA;AA1MM,0BAEW,WAAqC,oBAAI,IAAI;AAF9D,IAAM,2BAAN;","names":[]}